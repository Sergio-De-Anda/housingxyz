# housingxyz :: azure-devops

jobs:
  - job:
    displayName: 'angular.build'
    pool:
      vmImage: 'ubuntu-16.04'
    steps:
      - script: |
          cd angular
          npm clean-install
          npm run test
        displayName: 'npm test'
      - script: |
          cd angular
          npm run inspect -- -Dsonar.pullrequest.base=master -Dsonar.pullrequest.branch=$PULL_REQUEST_BRANCH -Dsonar.pullrequest.github.repository=revaturexyz/housingxyz -Dsonar.pullrequest.key=$PULL_REQUEST_KEY -Dsonar.pullrequest.provider=GitHub
        condition: and(succeeded(), eq(variables['Build.Reason'], 'PullRequest'))
        displayName: 'npm inspect::any'
        env:
          PULL_REQUEST_BRANCH: $(Build.SourceBranchName)
          PULL_REQUEST_KEY: $(System.PullRequest.PullRequestNumber)
          SONAR_LOGIN: $(sonarcloud.login)
      - script: |
          cd angular
          npm run inspect
        condition: and(succeeded(), eq(variables['Build.Reason'], 'IndividualCI'))
        displayName: 'npm inspect::dev'
        env:
          SONAR_LOGIN: $(sonarcloud.login)
      - task: Docker@2
        inputs:
          command: 'login'
          containerRegistry: 'revaturexyz-docker'
        displayName: 'docker login'
      - script: |
          docker image tag revaturexyz revaturexyz/revaturexyz:next
          docker image push revaturexyz/revaturexyz:next
        condition: and(succeeded(), eq(variables['Build.Reason'], 'IndividualCI'))
        displayName: 'docker push::dev'
      - script: |
          docker image tag revaturexyz revaturexyz/revaturexyz:$(Build.SourceBranchName)
          docker image push revaturexyz/revaturexyz:$(Build.SourceBranchName)
        condition: and(succeeded(), startsWith(variables['Build.SourceBranch'], 'refs/tags/'))
        displayName: 'docker push::stg'
      - task: Docker@2
        inputs:
          command: 'logout'
          containerRegistry: 'revaturexyz-docker'
        displayName: 'docker logout'
      - task: DownloadSecureFile@1
        displayName: 'terraform login'
        inputs:
          secureFile: 'terraform.key'
        name: terraformKey
      - script: |
          cp $(terraformKey.secureFilePath) $HOME/.terraformrc
          cd .azure
          terraform init
          terraform plan -detailed-exitcode
          terraform apply -auto-approve
          rm $HOME/.terraformrc
        condition: and(succeeded(), startsWith(variables['Build.SourceBranch'], 'refs/tags/'))
        displayName: 'terraform plan::stg'
        env:
          ARM_CLIENT_ID: $(arm.client.id)
          ARM_CLIENT_SECRET: $(arm.client.secret)
          ARM_SUBSCRIPTION_ID: $(arm.subscription.id)
          ARM_TENANT_ID: $(arm.tenant.id)
          CLOUDFLARE_EMAIL: $(cloudflare.email)
          CLOUDFLARE_TOKEN: $(cloudflare.token)
      - script: |
          cp $(terraformKey.secureFilePath) $HOME/.terraformrc
          cd .azure
          terraform init
          terraform plan -detailed-exitcode
          terraform apply -auto-approve
          rm $HOME/.terraformrc
        condition: and(succeeded(), eq(variables['Build.Reason'], 'IndividualCI'))
        displayName: 'terraform plan::dev'
        env:
          ARM_CLIENT_ID: $(arm.client.id)
          ARM_CLIENT_SECRET: $(arm.client.secret)
          ARM_SUBSCRIPTION_ID: $(arm.subscription.id)
          ARM_TENANT_ID: $(arm.tenant.id)
          CLOUDFLARE_EMAIL: $(cloudflare.email)
          CLOUDFLARE_TOKEN: $(cloudflare.token)

name: $(date:yyyyMMdd)$(rev:.rr)
trigger:
  branches:
    include:
      - master
  tags:
    include:
      - '*'
variables:
  - group: azure.vars
  - group: cloudflare.vars
  - group: sonarcloud.vars
