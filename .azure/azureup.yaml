# housingxyz :: azure-devops

jobs:
  - job:
    displayName: 'angular.build'
    pool:
      vmImage: 'ubuntu-16.04'
    steps:
      - script: |
          cd angular
          npm clean-install
          npm run test
        displayName: 'npm test'
      - script: |
          cd angular
          npm run inspect
        condition: and(succeeded(), eq(variables['Build.Reason'], 'IndividualCI'))
        displayName: 'npm inspect::dev'
        env:
          SONAR_LOGIN: $(sonarcloud.login)
      - script: |
          cd angular
          npm run inspect -- -Dsonar.pullrequest.base=master -Dsonar.pullrequest.branch=$PULL_REQUEST_BRANCH -Dsonar.pullrequest.github.repository=revaturexyz/housingxyz -Dsonar.pullrequest.key=$PULL_REQUEST_KEY -Dsonar.pullrequest.provider=GitHub
        condition: and(succeeded(), eq(variables['Build.Reason'], 'PullRequest'))
        displayName: 'npm inspect::any'
        env:
          PULL_REQUEST_BRANCH: $(Build.SourceBranchName)
          PULL_REQUEST_KEY: $(System.PullRequest.PullRequestNumber)
          SONAR_LOGIN: $(sonarcloud.login)
      - task: Docker@2
        inputs:
          command: 'login'
          containerRegistry: 'revaturexyz-docker'
        displayName: 'docker login'
      - script: |
          docker image tag revaturexyz revaturexyz/revaturexyz:$(Build.SourceBranchName)
          docker image push revaturexyz/revaturexyz:$(Build.SourceBranchName)
        condition: and(succeeded(), startsWith(variables['Build.SourceBranch'], 'refs/tags/'))
        displayName: 'docker push::stg'
      - script: |
          docker image tag revaturexyz revaturexyz/revaturexyz:next
          docker image push revaturexyz/revaturexyz:next
        condition: and(succeeded(), eq(variables['Build.Reason'], 'IndividualCI'))
        displayName: 'docker push::dev'
      - task: Docker@2
        inputs:
          command: 'logout'
          containerRegistry: 'revaturexyz-docker'
        displayName: 'docker logout'
      - script: |
          export ARM_CLIENT_ID=$(ARM_CLIENT_ID)
          export ARM_CLIENT_SECRET=$(ARM_CLIENT_SECRET)
          export ARM_SUBSCRIPTION_ID=$(ARM_SUBSCRIPTION_ID)
          export ARM_TENANT_ID=$(ARM_TENANT_ID)
          export CLOUDFLARE_EMAIL=$(CLOUDFLARE_EMAIL)
          export CLOUDFLARE_TOKEN=$(CLOUDFLARE_TOKEN)
          cd .azure
          terraform init
          terraform validate
          terraform plan
          terraform apply -auto-approve
        displayName: 'terraform'

name: $(date:yyyyMMdd)$(rev:.rr)
trigger:
  branches:
    include:
      - master
  tags:
    include:
      - '*'
variables:
  - group: azure.vars
  - group: cloudflare.vars
  - group: sonarcloud.vars
