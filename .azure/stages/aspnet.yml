# aspnet :: azure-devops

# required variables:
# directory, namespace, sonar.key, sonar.name, sonar.version,
# sonarcloud.login, cloudflare.email, cloudflare.token,
# arm.client.id, arm.client.secret, arm.subscription.id, arm.tenant.id

stages:
- stage: build
  displayName: build
  jobs:
  - job: build_aspnet
    displayName: build::aspnet
    pool:
      vmImage: ubuntu-18.04
    steps:
    - task: UseDotNet@2
      displayName: dotnet sdk
      inputs:
        version: 3.1.x
    - script: dotnet tool update --global dotnet-sonarscanner
      displayName: dotnet tool
    - script: dotnet sonarscanner begin /k:"$(sonar.key)" /n:"$(sonar.name)" /o:"revaturexyz" /v:"$(sonar.version)"
        /d:sonar.branch.name=$BUILD_SOURCEBRANCHNAME
        /d:sonar.cs.opencover.reportsPaths=**/TestResults/*/coverage.opencover.xml
        /d:sonar.cs.vstest.reportsPaths=**/*.trx
        /d:sonar.host.url=https://sonarcloud.io/
        /d:sonar.login=$(sonar.login)
      condition: and(succeeded(), ne(variables['Build.Reason'], 'PullRequest'))
      displayName: dotnet sonarscanner::branch
      workingDirectory: $(directory)/src
    - script: dotnet sonarscanner begin /k:"$(sonar.key)" /n:"$(sonar.name)" /o:"revaturexyz" /v:"$(sonar.version)"
        /d:sonar.cs.opencover.reportsPaths=**/TestResults/*/coverage.opencover.xml
        /d:sonar.cs.vstest.reportsPaths=**/*.trx
        /d:sonar.host.url=https://sonarcloud.io/
        /d:sonar.login=$(sonarcloud.login)
        /d:sonar.pullrequest.base=$SYSTEM_PULLREQUEST_TARGETBRANCH
        /d:sonar.pullrequest.branch=$SYSTEM_PULLREQUEST_SOURCEBRANCH
        /d:sonar.pullrequest.github.repository=$BUILD_REPOSITORY_NAME
        /d:sonar.pullrequest.key=$SYSTEM_PULLREQUEST_PULLREQUESTNUMBER
        /d:sonar.pullrequest.provider=$BUILD_REPOSITORY_PROVIDER
      condition: and(succeeded(), eq(variables['Build.Reason'], 'PullRequest'))
      displayName: dotnet sonarscanner::pull-request
      workingDirectory: $(directory)/src
    - script: dotnet restore
      displayName: dotnet restore
      workingDirectory: $(directory)/src
    - script: dotnet build --configuration Release --no-incremental --no-restore
      displayName: dotnet build
      workingDirectory: $(directory)/src
    - script: dotnet test
        --settings coverletArgs.runsettings
        --logger trx
        --configuration Release
        --no-build
      displayName: dotnet test
      workingDirectory: $(directory)/src
    - script: dotnet sonarscanner end /d:sonar.login=$(sonarcloud.login)
      displayName: dotnet sonarscanner end
      workingDirectory: $(directory)/src
    - task: PublishTestResults@2
      displayName: publish result::unit-test
      inputs:
        testRunner: VSTest
        testResultsFiles: '**/*.trx'
    - task: PublishCodeCoverageResults@1
      displayName: publish result::code-coverage
      inputs:
        codeCoverageTool: cobertura
        summaryFileLocation: '**/TestResults/*/coverage.cobertura.xml'

- stage: pack
  displayName: pack
  condition: and(succeeded('build'), or(
    eq(variables['Build.SourceBranch'], 'refs/heads/master'),
    startsWith(variables['Build.SourceBranch'], 'refs/tags')))
  dependsOn: build
  jobs:
  - job: pack_aspnet
    displayName: pack::aspnet
    pool:
      vmImage: ubuntu-18.04
    steps:
    - task: DownloadSecureFile@1
      inputs:
        secureFile: aspnet.${{ variables.directory }}.dev.json
      name: appconfigdev
      condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/master'))
      displayName: aspnet appsettings::dev
    - task: DownloadSecureFile@1
      inputs:
        secureFile: aspnet.${{ variables.directory }}.stg.json
      name: appconfigstg
      condition: and(succeeded(), startsWith(variables['Build.SourceBranch'], 'refs/tags'))
      displayName: aspnet appsettings::stg
    - task: Docker@2
      inputs:
        command: login
        containerRegistry: revaturexyz-docker
      displayName: docker login
    - script: |
        set -e
        cd $(directory)
        cp $(appconfigdev.secureFilePath) src/Revature.$(namespace).Api/appsettings.json
        docker image build -f .docker/dockerfile -t $(directory) .
        docker image tag $(directory) revaturexyz/$(directory):dev
        docker image push revaturexyz/$(directory):dev
      condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/master'))
      displayName: docker push::dev
    - script: |
        set -e
        cd $(directory)
        cp $(appconfigstg.secureFilePath) src/Revature.$(namespace).Api/appsettings.json
        docker image build -f .docker/dockerfile -t $(directory) .
        docker image tag $(directory) revaturexyz/$(directory):stg
        docker image push revaturexyz/$(directory):stg
      condition: and(succeeded(), startsWith(variables['Build.SourceBranch'], 'refs/tags'))
      displayName: docker push::stg
    - task: Docker@2
      inputs:
        command: logout
        containerRegistry: revaturexyz-docker
      displayName: docker logout

- stage: dev
  displayName: deploy::dev
  condition: and(succeeded('pack'), startsWith(variables['Build.SourceBranch'], 'refs/heads/master'))
  dependsOn: pack
  jobs:
  - job: deploy_dev_aspnet
    displayName: deploy::dev::aspnet
    pool:
      vmImage: ubuntu-18.04
    steps:
    - task: DownloadSecureFile@1
      inputs:
        secureFile: dockerup.${{ variables.directory }}.dev.yaml
      name: dkup
      displayName: docker compose
    - task: DownloadSecureFile@1
      inputs:
        secureFile: terraform.key
      name: tfkey
      displayName: terraform login
    - task: DownloadSecureFile@1
      inputs:
        secureFile: backend.${{ variables.directory }}.hcl
      name: tfstate
      displayName: terraform state
    - task: DownloadSecureFile@1
      inputs:
        secureFile: terraform.${{ variables.directory }}.dev.auto.tfvars
      name: tfvars
      displayName: terraform variables
    - script: |
        set -e
        cd $(directory)
        cp $(dkup.secureFilePath) .docker/
        cp $(tfkey.secureFilePath) $HOME/.terraformrc
        cp $(tfvars.secureFilePath) .terraformio/
        cd .terraformio
        printf '1\n' | terraform init -backend-config=$(tfstate.secureFilePath)
        terraform plan
        terraform apply -auto-approve
        az login --service-principal -u $ARM_CLIENT_ID -p $ARM_CLIENT_SECRET --tenant $ARM_TENANT_ID
        az webapp restart --name $(directory)-aspnet-dev --resource-group $(directory)-group
      displayName: terraform apply::dev
      env:
        ARM_CLIENT_ID: $(arm.client.id)
        ARM_CLIENT_SECRET: $(arm.client.secret)
        ARM_SUBSCRIPTION_ID: $(arm.subscription.id)
        ARM_TENANT_ID: $(arm.tenant.id)
        CLOUDFLARE_EMAIL: $(cloudflare.email)
        CLOUDFLARE_TOKEN: $(cloudflare.token)

- stage: stg
  displayName: deploy::stg
  condition: and(succeeded('pack'), startsWith(variables['Build.SourceBranch'], 'refs/tags'))
  dependsOn: pack
  jobs:
  - job: deploy_stg_aspnet
    displayName: deploy::stg::aspnet
    pool:
      vmImage: ubuntu-18.04
    steps:
    - task: DownloadSecureFile@1
      inputs:
        secureFile: dockerup.${{ variables.directory }}.stg.yaml
      name: dkup
      displayName: docker compose
    - task: DownloadSecureFile@1
      inputs:
        secureFile: terraform.key
      name: tfkey
      displayName: terraform login
    - task: DownloadSecureFile@1
      inputs:
        secureFile: backend.${{ variables.directory }}.hcl
      name: tfstate
      displayName: terraform state
    - task: DownloadSecureFile@1
      inputs:
        secureFile: terraform.${{ variables.directory }}.stg.auto.tfvars
      name: tfvars
      displayName: terraform variables
    - script: |
        set -e
        cd $(directory)
        cp $(dkup.secureFilePath) .docker/
        cp $(tfkey.secureFilePath) $HOME/.terraformrc
        cp $(tfvars.secureFilePath) .terraformio/
        cd .terraformio
        printf '3\n' | terraform init -backend-config=$(tfstate.secureFilePath)
        terraform plan
        terraform apply -auto-approve
        az login --service-principal -u $ARM_CLIENT_ID -p $ARM_CLIENT_SECRET --tenant $ARM_TENANT_ID
        az webapp restart --name $(directory)-aspnet-stg --resource-group $(directory)-group
      displayName: terraform apply::stg
      env:
        ARM_CLIENT_ID: $(arm.client.id)
        ARM_CLIENT_SECRET: $(arm.client.secret)
        ARM_SUBSCRIPTION_ID: $(arm.subscription.id)
        ARM_TENANT_ID: $(arm.tenant.id)
        CLOUDFLARE_EMAIL: $(cloudflare.email)
        CLOUDFLARE_TOKEN: $(cloudflare.token)
